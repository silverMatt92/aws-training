---
AWSTemplateFormatVersion: 2010-09-09
Description:  This template is deploying six EC2 private instances. It requires the VPC skeleton in the same folder.
Parameters:
  LatestAmiId:
    Description: AMI for EC2 (default is latest AmaLinux2)
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "Name of an existing SSH Keypair to access the instance"
Resources:
  EC2InstanceReservedA:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref KeyName
      InstanceType: "t2.micro"
      ImageId: !Ref LatestAmiId
      SubnetId: !ImportValue picnic-vpc1-subnet-reserveda
      SecurityGroupIds: 
        - !Ref InstanceSecurityGroup
      UserData: 
        Fn::Base64: 
          !Sub |
            #!/bin/bash 
            hostnamectl set-hostname reserved-a
      Tags:
        - Key: Name
          Value: picnic-instance-reserveda
  EC2InstanceReservedB:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref KeyName
      InstanceType: "t2.micro"
      ImageId: !Ref LatestAmiId
      SubnetId: !ImportValue picnic-vpc1-subnet-reservedb
      SecurityGroupIds: 
        - !Ref InstanceSecurityGroupResB
      UserData: 
        Fn::Base64: 
          !Sub |
            #!/bin/bash 
            hostnamectl set-hostname reserved-b
      Tags:
        - Key: Name
          Value: picnic-instance-reservedb
  EC2InstanceReservedC:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref KeyName
      InstanceType: "t2.micro"
      ImageId: !Ref LatestAmiId
      SubnetId: !ImportValue picnic-vpc1-subnet-reservedc
      SecurityGroupIds: 
        - !Ref InstanceSecurityGroup
      UserData: 
        Fn::Base64: 
          !Sub |
            #!/bin/bash 
            hostnamectl set-hostname reserved-c
      Tags:
        - Key: Name
          Value: picnic-instance-reservedc
  EC2InstanceAppA:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref KeyName
      InstanceType: "t2.micro"
      ImageId: !Ref LatestAmiId
      SubnetId: !ImportValue picnic-vpc1-subnet-appa
      SecurityGroupIds: 
        - !Ref InstanceSecurityGroupAppA
      UserData: 
        Fn::Base64: 
          !Sub |
            #!/bin/bash 
            hostnamectl set-hostname app-a
      Tags:
        - Key: Name
          Value: picnic-instance-appa
  EC2InstanceAppB:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref KeyName
      InstanceType: "t2.micro"
      ImageId: !Ref LatestAmiId
      SubnetId: !ImportValue picnic-vpc1-subnet-appb
      SecurityGroupIds: 
        - !Ref InstanceSecurityGroup
      UserData: 
        Fn::Base64: 
          !Sub |
            #!/bin/bash 
            hostnamectl set-hostname app-b
      Tags:
        - Key: Name
          Value: picnic-instance-appb
  EC2InstanceAppC:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref KeyName
      InstanceType: "t2.micro"
      ImageId: !Ref LatestAmiId
      SubnetId: !ImportValue picnic-vpc1-subnet-appc
      SecurityGroupIds: 
        - !Ref InstanceSecurityGroupAppC
      UserData: 
        Fn::Base64: 
          !Sub |
            #!/bin/bash 
            hostnamectl set-hostname app-c
      Tags:
        - Key: Name
          Value: picnic-instance-appc
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !ImportValue picnic-vpc1
      GroupDescription: Enable SSH access from Bastion subnet
      SecurityGroupIngress:
        - Description: 'Allow SSH Bastion IN'
          IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '10.16.112.0/16'
  InstanceSecurityGroupAppA:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !ImportValue picnic-vpc1
      GroupDescription: Limit to only HTTP out
      SecurityGroupIngress:
        - Description: 'Allow SSH Bastion IN'
          IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '10.16.112.0/16'
      SecurityGroupEgress:
        - Description: 'Limit to only HTTP OUT'
          IpProtocol: tcp
          FromPort: '80'
          ToPort: 80
          CidrIp: '0.0.0.0/0'
  InstanceSecurityGroupResB:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !ImportValue picnic-vpc1
      GroupDescription: Limit to only HTTP out
      SecurityGroupIngress:
        - Description: 'Allow SSH Bastion IN'
          IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '10.16.112.0/16'
      SecurityGroupEgress:
        - Description: 'Limit to only HTTP OUT'
          IpProtocol: tcp
          FromPort: '80'
          ToPort: 80
          CidrIp: '0.0.0.0/0'
  InstanceSecurityGroupAppC:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !ImportValue picnic-vpc1
      GroupDescription: Limit to only HTTP out
      SecurityGroupIngress:
        - Description: 'Allow SSH Bastion IN'
          IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '10.16.112.0/16'
      SecurityGroupEgress:
        - Description: 'Limit to only HTTP OUT'
          IpProtocol: tcp
          FromPort: '80'
          ToPort: 80
          CidrIp: '0.0.0.0/0'
